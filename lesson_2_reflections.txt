What happens when you initialize a repository? Why do you need to do it?

1. When you initialize a repository, a new folder, .git gets created

1a. .git folder contains the metadata related to this repository

2. At this point of time, system has not done any commit for you

3. Any files and sub-folders in that folder might be a part of that repository

4. Using git status, you can figure out the list of new/updated files that are not yet added/commited into the repository


How is the staging area different from the working directory and the repository? What value do you think it offers?
1. Staging area is a space where we add new files that we want to add in the repository as a single logical commit.
1a. It gives flexibility to user to group files logically that we want to add in the repository as a single commit.
2. Repository might not contain all the files/sub-folders of the directory

How can you use the staging area to make sure you have one commit per logical change?
1. You can add only those files (changes) from working directory to staging area that you want to commit as a logical change.
2. Any changes in the working directory, which has not been added into staging area will not be commited into repository.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
1. When adding  an experimental feature
2. When doing some customized changes
3. When providing a hot-fix
A new set of commits can contain any experimental/customized/hot-fix code that doesn't overlap with master branch.

How do the diagrams help you visualize the branch structure?
1. We can identify the common commit node for two or more branches.
2. We can identify the changes done in specific branch and confirm it using 'git log'
3. If we checkout any historical commit, make changes, and commit, unless we don't label it with branch-name, this commit will lost.